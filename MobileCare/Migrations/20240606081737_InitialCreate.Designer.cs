// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MobileCare.Data;

#nullable disable

namespace MobileCare.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240606081737_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Careworker",
                            NormalizedName = "CAREWORKER"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ApplicationUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 11,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MobileCare.Models.ActivityOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("RatePerHour")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RatePerHour = 450.0,
                            Title = "Bathroom & Bathing Assistance"
                        },
                        new
                        {
                            Id = 2,
                            RatePerHour = 325.0,
                            Title = "Dressing Assistance"
                        },
                        new
                        {
                            Id = 3,
                            RatePerHour = 350.0,
                            Title = "Post-Operative Care"
                        },
                        new
                        {
                            Id = 4,
                            RatePerHour = 375.0,
                            Title = "Bed Bath"
                        },
                        new
                        {
                            Id = 5,
                            RatePerHour = 400.0,
                            Title = "Mobility Assistance"
                        });
                });

            modelBuilder.Entity("MobileCare.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suburb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Port Elizabeth",
                            Country = "South Africa",
                            PostalCode = "6059",
                            StreetAddress = "25 Sayster",
                            Suburb = "Salsoneville"
                        },
                        new
                        {
                            Id = 2,
                            City = "Port Elizabeth",
                            Country = "South Africa",
                            PostalCode = "6025",
                            StreetAddress = "53 Liesbeek",
                            Suburb = "Kabega Park"
                        },
                        new
                        {
                            Id = 3,
                            City = "Port Elizabeth",
                            Country = "South Africa",
                            PostalCode = "6070",
                            StreetAddress = "12 Arras",
                            Suburb = "Lorraine"
                        },
                        new
                        {
                            Id = 4,
                            City = "Port Elizabeth",
                            Country = "South Africa",
                            PostalCode = "6059",
                            StreetAddress = "15 Marock",
                            Suburb = "Sanctor"
                        },
                        new
                        {
                            Id = 5,
                            City = "Port Elizabeth",
                            Country = "South Africa",
                            PostalCode = "6059",
                            StreetAddress = "33 Heathcote",
                            Suburb = "Aspen Heights"
                        },
                        new
                        {
                            Id = 6,
                            City = "Port Elizabeth",
                            Country = "South Africa",
                            PostalCode = "6059",
                            StreetAddress = "12 St Benedict",
                            Suburb = "West End"
                        },
                        new
                        {
                            Id = 7,
                            City = "Port Elizabeth",
                            Country = "South Africa",
                            PostalCode = "6020",
                            StreetAddress = "5 Crammer",
                            Suburb = "Malabar"
                        },
                        new
                        {
                            Id = 8,
                            City = "Port Elizabeth",
                            Country = "South Africa",
                            PostalCode = "6025",
                            StreetAddress = "73 Clarence",
                            Suburb = "Westring"
                        });
                });

            modelBuilder.Entity("MobileCare.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("ApplicationUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e301eccf-a135-4607-bf9a-665578e93531",
                            Email = "admin@mobilecare.com",
                            EmailConfirmed = false,
                            FullName = "Junaid Hassan",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MOBILECARE.COM",
                            NormalizedUserName = "ADMIN@MOBILECARE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEI6EFZqX48rtbsX95OXFaW//IiD/3JFzTi1URoL2GgUaTnN2w1cH+roD+PpOScQgwA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0ff7c383-40f8-4ba8-b88d-8fe3991d8388",
                            TwoFactorEnabled = false,
                            UserName = "admin@mobilecare.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2974903d-7958-430c-9a9a-48f24b495a23",
                            Email = "tevinp@mobilecare.com",
                            EmailConfirmed = false,
                            FullName = "Tevin Prinsloo",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEVINP@MOBILECARE.COM",
                            NormalizedUserName = "TEVINP@MOBILECARE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBmXN2/j5yT1+XvdG7M1i5M8cD/nT5cJ1xDIZ+UW9ra/3cDh87oSq/udyNVvk/UCGQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2c11c4fb-26a3-4daa-9340-9e4ff0fbe9c7",
                            TwoFactorEnabled = false,
                            UserName = "tevinp@mobilecare.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b9db920d-2783-458b-b7c3-e46bf9818bed",
                            Email = "shaheedt@mobilecare.com",
                            EmailConfirmed = false,
                            FullName = "Shaheed Tobias",
                            LockoutEnabled = false,
                            NormalizedEmail = "SHAHEEDT@MOBILECARE.COM",
                            NormalizedUserName = "SHAHEEDT@MOBILECARE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGgtcf79ncTz0NT6EYYCdC7x1oL+jZgZOQN83dg3I97y8xQzf++nCb/LAt4v45mkrA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1004d689-9a05-4595-b358-1fd7441f2942",
                            TwoFactorEnabled = false,
                            UserName = "shaheedt@mobilecare.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0e6f5613-aacc-40ad-acc1-3f28c9f18809",
                            Email = "charlezer@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Charleze Rensburg",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHARLEZER@GMAIL.COM",
                            NormalizedUserName = "CHARLEZER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHsHLcqbmztv/VpRdQRX78tQtabD7teA33KjZ635QynC9lPA/TSYRUCjp+r9nXfEVQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3c06d9ce-b06f-45d3-aad2-af8a57ed4250",
                            TwoFactorEnabled = false,
                            UserName = "charlezer@gmail.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f0241bbf-d983-4ce2-89be-0fbc7a8182ca",
                            Email = "charlp@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Charl Peters",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHARLP@GMAIL.COM",
                            NormalizedUserName = "CHARLP@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEsGCnGWCfmJ1cbrfGpgegP6GfFR2i7N7X1YHBWjLgr1XvI5KvCuoHcID245RR/9iQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f7516666-5b01-4d28-8b99-3c4d0d29f9bd",
                            TwoFactorEnabled = false,
                            UserName = "charlp@gmail.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "023a7508-8264-45ba-83f9-f9ab19fdb00d",
                            Email = "sinaedl@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Sinaed Lila",
                            LockoutEnabled = false,
                            NormalizedEmail = "SINAEDL@GMAIL.COM",
                            NormalizedUserName = "SINAEDL@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAX+HY1ZAw1lX0GVDk6xgwXX3LeDHF2r9mZwQhg4epHA1H6UWkUrP4vggLWMMHhTFA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e1a94569-ea96-4337-a620-6b408bc579cc",
                            TwoFactorEnabled = false,
                            UserName = "sinaedl@gmail.com"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c85a7a72-3b9c-478a-9e38-0a4b3747476b",
                            Email = "danep@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Dane Prinsloo",
                            LockoutEnabled = false,
                            NormalizedEmail = "DANEP@GMAIL.COM",
                            NormalizedUserName = "DANEP@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEM9jvi56bE4GUIYPJFH16eVUXzn184WavfGwv1c8W9gS//EYLlha44sBv6rPJ9o+RQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "831a28fb-b191-4efa-970c-e54572a63298",
                            TwoFactorEnabled = false,
                            UserName = "danep@gmail.com"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "804a0459-ea19-43be-8d7d-5048f3b42ced",
                            Email = "demim@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Demi Miller",
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMIM@GMAIL.COM",
                            NormalizedUserName = "DEMIM@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBepFjjIt88Axp9JP72whAh64RviX3npoILifH3bYbQHbaJnvKybWZaI1qTafe1OeA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "68bb3698-5fdc-4b24-9f29-c816f2acb082",
                            TwoFactorEnabled = false,
                            UserName = "demim@gmail.com"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b1467b43-e226-4c49-b71d-bbbe07d1e729",
                            Email = "tasneemd@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Tasneem Dennis",
                            LockoutEnabled = false,
                            NormalizedEmail = "TASNEEMD@GMAIL.COM",
                            NormalizedUserName = "TASNEEMD@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEg/fhoaaUNP5shiGRlv12XWsxXRK+ojwXbFhQqws+ty7LuFYIFxgum9J76TaHQfyg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f2228bcb-851c-4f38-ac77-bd83ab2207db",
                            TwoFactorEnabled = false,
                            UserName = "tasneemd@gmail.com"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ec16896-6fe1-444c-9d39-cf3a2e7bf730",
                            Email = "fazlodeanl@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Fazlodean Lean",
                            LockoutEnabled = false,
                            NormalizedEmail = "FAZLODEANL@GMAIL.COM",
                            NormalizedUserName = "FAZLODEANL@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEN6h4hsp3efCr+4ScX+bbGCgzB+fVVo8Tr5nP3NcD/dTJxXFWJ8Dq/U5Q/3e1adreg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "dd946f83-da45-4313-a428-3e49556c2a9e",
                            TwoFactorEnabled = false,
                            UserName = "fazlodeanl@gmail.com"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e74d823d-f22a-4822-bb71-b51658cf3fbd",
                            Email = "brynthiab@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Brynthia Burgins",
                            LockoutEnabled = false,
                            NormalizedEmail = "BRYNTHIAB@GMAIL.COM",
                            NormalizedUserName = "BRYNTHIAB@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAY8B+J6snpp6TdsyEU5IAX/RAZS1jAaz3YMCiAbqm2O8/MJbWmvc+I9xVU7wnQhMA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00ddda0c-a089-46b0-9c43-38a0bc631aaf",
                            TwoFactorEnabled = false,
                            UserName = "brynthiab@gmail.com"
                        });
                });

            modelBuilder.Entity("MobileCare.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = 2,
                            Date = new DateOnly(2024, 6, 3),
                            EndTime = new TimeOnly(11, 0, 0),
                            PatientId = 1,
                            StartTime = new TimeOnly(8, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = 2,
                            Date = new DateOnly(2024, 6, 3),
                            EndTime = new TimeOnly(14, 0, 0),
                            PatientId = 2,
                            StartTime = new TimeOnly(12, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            ApplicationUserId = 2,
                            Date = new DateOnly(2024, 6, 4),
                            EndTime = new TimeOnly(10, 0, 0),
                            PatientId = 3,
                            StartTime = new TimeOnly(9, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            ApplicationUserId = 2,
                            Date = new DateOnly(2024, 6, 4),
                            EndTime = new TimeOnly(13, 0, 0),
                            PatientId = 4,
                            StartTime = new TimeOnly(11, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            ApplicationUserId = 3,
                            Date = new DateOnly(2024, 6, 3),
                            EndTime = new TimeOnly(12, 0, 0),
                            PatientId = 5,
                            StartTime = new TimeOnly(8, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            ApplicationUserId = 3,
                            Date = new DateOnly(2024, 6, 3),
                            EndTime = new TimeOnly(15, 0, 0),
                            PatientId = 6,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            ApplicationUserId = 3,
                            Date = new DateOnly(2024, 6, 4),
                            EndTime = new TimeOnly(14, 0, 0),
                            PatientId = 7,
                            StartTime = new TimeOnly(12, 0, 0)
                        },
                        new
                        {
                            Id = 8,
                            ApplicationUserId = 3,
                            Date = new DateOnly(2024, 6, 4),
                            EndTime = new TimeOnly(16, 0, 0),
                            PatientId = 8,
                            StartTime = new TimeOnly(15, 0, 0)
                        });
                });

            modelBuilder.Entity("MobileCare.Models.BookingActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("ActivityNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("BookingNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Hours")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BookingActivities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityId = 1,
                            ActivityNote = "Patient needed slight adjustment to usual positioning of shower chair",
                            BookingId = 1,
                            BookingNote = "Ensure shower chair is readily available",
                            Hours = 1
                        },
                        new
                        {
                            Id = 2,
                            ActivityId = 2,
                            ActivityNote = "Due to warm weather, patient was dressed in shorts and short sleeved shirt as requested",
                            BookingId = 1,
                            BookingNote = "Prefer wearing comfortable clothing according to weather",
                            Hours = 1
                        },
                        new
                        {
                            Id = 3,
                            ActivityId = 3,
                            ActivityNote = "Aseptic cleaning and wound dressing changes were done. No abnormalities found.",
                            BookingId = 1,
                            BookingNote = "I have 1 surgical wound. Wound dressing changes to be done twice daily. Had kneee replacement done.",
                            Hours = 1
                        },
                        new
                        {
                            Id = 4,
                            ActivityId = 5,
                            BookingId = 2,
                            BookingNote = "Require assistance to and from doctor visits",
                            Hours = 2
                        },
                        new
                        {
                            Id = 5,
                            ActivityId = 2,
                            BookingId = 3,
                            BookingNote = "Require assistance with dressing",
                            Hours = 1
                        },
                        new
                        {
                            Id = 6,
                            ActivityId = 3,
                            BookingId = 4,
                            BookingNote = "Require post-oparative care after skin surgery",
                            Hours = 2
                        },
                        new
                        {
                            Id = 7,
                            ActivityId = 4,
                            ActivityNote = "Bathing of patient went well. Skin seems a bit irritated by particular brand of soap used. Patient should consider trying different soap brand.",
                            BookingId = 5,
                            BookingNote = "Prefer being bathed with music in the background",
                            Hours = 1
                        },
                        new
                        {
                            Id = 8,
                            ActivityId = 5,
                            ActivityNote = "Accomodated patient during the visitation",
                            BookingId = 5,
                            BookingNote = "Visiting my grandchildren and require assistance",
                            Hours = 3
                        },
                        new
                        {
                            Id = 9,
                            ActivityId = 3,
                            BookingId = 6,
                            BookingNote = "Had hip surgery. Required post-operative care assistance",
                            Hours = 2
                        },
                        new
                        {
                            Id = 10,
                            ActivityId = 1,
                            BookingId = 7,
                            Hours = 1
                        },
                        new
                        {
                            Id = 11,
                            ActivityId = 2,
                            BookingId = 7,
                            Hours = 1
                        },
                        new
                        {
                            Id = 12,
                            ActivityId = 2,
                            ActivityNote = "Assisted patient as requested",
                            BookingId = 8,
                            BookingNote = "Require dressing assistance as I can't move my body much due to injury",
                            Hours = 1
                        });
                });

            modelBuilder.Entity("MobileCare.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            ApplicationUserId = 4
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            ApplicationUserId = 5
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 3,
                            ApplicationUserId = 6
                        },
                        new
                        {
                            Id = 4,
                            AddressId = 4,
                            ApplicationUserId = 7
                        },
                        new
                        {
                            Id = 5,
                            AddressId = 5,
                            ApplicationUserId = 8
                        },
                        new
                        {
                            Id = 6,
                            AddressId = 6,
                            ApplicationUserId = 9
                        },
                        new
                        {
                            Id = 7,
                            AddressId = 7,
                            ApplicationUserId = 10
                        },
                        new
                        {
                            Id = 8,
                            AddressId = 8,
                            ApplicationUserId = 11
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("MobileCare.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("MobileCare.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MobileCare.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("MobileCare.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
