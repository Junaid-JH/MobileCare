// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MobileCare.Data;

#nullable disable

namespace MobileCare.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Careworker",
                            NormalizedName = "CAREWORKER"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Patient",
                            NormalizedName = "PATIENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ApplicationUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 6,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 7,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 8,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 9,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 10,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 11,
                            RoleId = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MobileCare.Models.ActivityOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("RatePerHour")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RatePerHour = 450.0,
                            Title = "Bathroom & Bathing Assistance"
                        },
                        new
                        {
                            Id = 2,
                            RatePerHour = 325.0,
                            Title = "Dressing Assistance"
                        },
                        new
                        {
                            Id = 3,
                            RatePerHour = 350.0,
                            Title = "Post-Operative Care"
                        },
                        new
                        {
                            Id = 4,
                            RatePerHour = 375.0,
                            Title = "Bed Bath"
                        },
                        new
                        {
                            Id = 5,
                            RatePerHour = 400.0,
                            Title = "Mobility Assistance"
                        });
                });

            modelBuilder.Entity("MobileCare.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suburb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Port Elizabeth",
                            Country = "South Africa",
                            PostalCode = "6059",
                            StreetAddress = "25 Sayster",
                            Suburb = "Salsoneville"
                        },
                        new
                        {
                            Id = 2,
                            City = "Port Elizabeth",
                            Country = "South Africa",
                            PostalCode = "6025",
                            StreetAddress = "53 Liesbeek",
                            Suburb = "Kabega Park"
                        },
                        new
                        {
                            Id = 3,
                            City = "Port Elizabeth",
                            Country = "South Africa",
                            PostalCode = "6070",
                            StreetAddress = "12 Arras",
                            Suburb = "Lorraine"
                        },
                        new
                        {
                            Id = 4,
                            City = "Port Elizabeth",
                            Country = "South Africa",
                            PostalCode = "6059",
                            StreetAddress = "15 Marock",
                            Suburb = "Sanctor"
                        },
                        new
                        {
                            Id = 5,
                            City = "Port Elizabeth",
                            Country = "South Africa",
                            PostalCode = "6059",
                            StreetAddress = "33 Heathcote",
                            Suburb = "Aspen Heights"
                        },
                        new
                        {
                            Id = 6,
                            City = "Port Elizabeth",
                            Country = "South Africa",
                            PostalCode = "6059",
                            StreetAddress = "12 St Benedict",
                            Suburb = "West End"
                        },
                        new
                        {
                            Id = 7,
                            City = "Port Elizabeth",
                            Country = "South Africa",
                            PostalCode = "6020",
                            StreetAddress = "5 Crammer",
                            Suburb = "Malabar"
                        },
                        new
                        {
                            Id = 8,
                            City = "Port Elizabeth",
                            Country = "South Africa",
                            PostalCode = "6025",
                            StreetAddress = "73 Clarence",
                            Suburb = "Westring"
                        });
                });

            modelBuilder.Entity("MobileCare.Models.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("ApplicationUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "43168448-7b01-4d06-9eb5-b776f3323193",
                            Email = "admin@mobilecare.com",
                            EmailConfirmed = false,
                            FullName = "Junaid Hassan",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@MOBILECARE.COM",
                            NormalizedUserName = "ADMIN@MOBILECARE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECJ7XslQxv4D9pT+3eK5+naMIGNLF2Dah7K8BcEEY1kfGDxSLOuoVRhgQKEYsdAEAA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7570b39a-ecf6-4243-ace2-034cf2aa1c68",
                            TwoFactorEnabled = false,
                            UserName = "admin@mobilecare.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "78fbad70-dfb0-4ce3-a032-16543fbc4048",
                            Email = "tevinp@mobilecare.com",
                            EmailConfirmed = false,
                            FullName = "Tevin Prinsloo",
                            LockoutEnabled = false,
                            NormalizedEmail = "TEVINP@MOBILECARE.COM",
                            NormalizedUserName = "TEVINP@MOBILECARE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJFyn4B72mJsFIB2WZQ1s4UrB99cQs8IWnOPpCLkxmpvH39ATAzuA0q38T1AOlnhbQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "67ab1494-7bdb-4c88-b5af-b6a80d43007c",
                            TwoFactorEnabled = false,
                            UserName = "tevinp@mobilecare.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "beffdfd6-a605-4d49-8597-702cf3a1a6ab",
                            Email = "shaheedt@mobilecare.com",
                            EmailConfirmed = false,
                            FullName = "Shaheed Tobias",
                            LockoutEnabled = false,
                            NormalizedEmail = "SHAHEEDT@MOBILECARE.COM",
                            NormalizedUserName = "SHAHEEDT@MOBILECARE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELPB3O8j2NC4hZOaEpi4RdBatCyI23Xw3SP/5ybQ5UhNTV/XxwdRcLEka/imYUw5VA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "82565468-e94b-47ff-a92a-0d8362a66546",
                            TwoFactorEnabled = false,
                            UserName = "shaheedt@mobilecare.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f84d1317-429d-4cd8-adbc-873dad4abfb3",
                            Email = "charlezer@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Charleze Rensburg",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHARLEZER@GMAIL.COM",
                            NormalizedUserName = "CHARLEZER@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELAjTeZMuD93yWbZJrDANcNEEI/E5rhSq+Y0pBXORMxS4Z2B3gV5MejCda0N4P7oNA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bde16400-6d6c-4b31-8252-b21828857ebf",
                            TwoFactorEnabled = false,
                            UserName = "charlezer@gmail.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "787d348b-0f37-4cf7-be9d-972978318a13",
                            Email = "charlp@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Charl Peters",
                            LockoutEnabled = false,
                            NormalizedEmail = "CHARLP@GMAIL.COM",
                            NormalizedUserName = "CHARLP@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAECCh5jL4afdwCZ0ABfxYhvM78Icy/yMyFHXotJD1LxyWx/ieXbk67tRAWQJ+ibhn4g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4a889f1-f0eb-451e-a76a-220871999a87",
                            TwoFactorEnabled = false,
                            UserName = "charlp@gmail.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08c364dc-0622-4eea-b19b-e0603ac7e728",
                            Email = "sinaedl@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Sinaed Lila",
                            LockoutEnabled = false,
                            NormalizedEmail = "SINAEDL@GMAIL.COM",
                            NormalizedUserName = "SINAEDL@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEaDybpN16gqdm8L8civ56hRvlJSamHX+w/PhHLvba2EzHxfi1AYsqjVkiwjGvoW3w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fa1c18fb-6a46-40b7-931f-66d3823eb214",
                            TwoFactorEnabled = false,
                            UserName = "sinaedl@gmail.com"
                        },
                        new
                        {
                            Id = 7,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c90014ac-6328-48f2-b78f-f3e3da708ddd",
                            Email = "danep@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Dane Prinsloo",
                            LockoutEnabled = false,
                            NormalizedEmail = "DANEP@GMAIL.COM",
                            NormalizedUserName = "DANEP@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHUZsGWLnnlEr3vGNwVMJ0CdyWvVBTIqtcDbBoQCLggfo5TLHEqU2wAykc0IuaCA/Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ace41199-8ada-4d8e-b21b-f298fd04d4ed",
                            TwoFactorEnabled = false,
                            UserName = "danep@gmail.com"
                        },
                        new
                        {
                            Id = 8,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d606bb57-6a4b-4632-a29e-b3caf356af2b",
                            Email = "demim@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Demi Miller",
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMIM@GMAIL.COM",
                            NormalizedUserName = "DEMIM@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBEjpXwLa8uNj2Q+ldcms3wivvuOU3ZXZOCO2Zx4KeY9z4DDts0ua1WLKWND75WoeA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1f35c12c-02b0-464d-bc64-385345431e12",
                            TwoFactorEnabled = false,
                            UserName = "demim@gmail.com"
                        },
                        new
                        {
                            Id = 9,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6c697291-b25c-4f66-9533-954ca9753930",
                            Email = "tasneemd@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Tasneem Dennis",
                            LockoutEnabled = false,
                            NormalizedEmail = "TASNEEMD@GMAIL.COM",
                            NormalizedUserName = "TASNEEMD@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJcbNkCfj1wBT447rmxmPzL16JX6GKHsvRDHPhFRja32CV1ov3khMblBU3d1J5cA8Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7d47733e-c03f-4f03-abb3-26ad8c7f888f",
                            TwoFactorEnabled = false,
                            UserName = "tasneemd@gmail.com"
                        },
                        new
                        {
                            Id = 10,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a3486377-d556-4584-add0-fd259fe6a300",
                            Email = "fazlodeanl@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Fazlodean Lean",
                            LockoutEnabled = false,
                            NormalizedEmail = "FAZLODEANL@GMAIL.COM",
                            NormalizedUserName = "FAZLODEANL@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEOxYJT9oEFz+jFYHm5EVgCMBdBP7TJ66g92x6Z2NgYj47CJ7AoUDkXffXJDgZ5gNcw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bb725ca4-5d65-4f27-9e6c-fa135009bfdf",
                            TwoFactorEnabled = false,
                            UserName = "fazlodeanl@gmail.com"
                        },
                        new
                        {
                            Id = 11,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9c3f73bd-0cb2-478a-8b70-243fbfb3c625",
                            Email = "brynthiab@gmail.com",
                            EmailConfirmed = false,
                            FullName = "Brynthia Burgins",
                            LockoutEnabled = false,
                            NormalizedEmail = "BRYNTHIAB@GMAIL.COM",
                            NormalizedUserName = "BRYNTHIAB@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEKNiw8PH4xZB8dZiNG1le0seOz212MGG7/QrlaQtEPecFt7ujBbdbSAPfEjN+IiEdw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6983b383-7bf0-4bde-8e0f-e34bfa48c36c",
                            TwoFactorEnabled = false,
                            UserName = "brynthiab@gmail.com"
                        });
                });

            modelBuilder.Entity("MobileCare.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = 2,
                            Date = new DateOnly(2024, 6, 3),
                            EndTime = new TimeOnly(11, 0, 0),
                            PatientId = 1,
                            StartTime = new TimeOnly(8, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = 2,
                            Date = new DateOnly(2024, 6, 3),
                            EndTime = new TimeOnly(14, 0, 0),
                            PatientId = 2,
                            StartTime = new TimeOnly(12, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            ApplicationUserId = 2,
                            Date = new DateOnly(2024, 6, 4),
                            EndTime = new TimeOnly(10, 0, 0),
                            PatientId = 3,
                            StartTime = new TimeOnly(9, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            ApplicationUserId = 2,
                            Date = new DateOnly(2024, 6, 4),
                            EndTime = new TimeOnly(13, 0, 0),
                            PatientId = 4,
                            StartTime = new TimeOnly(11, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            ApplicationUserId = 3,
                            Date = new DateOnly(2024, 6, 3),
                            EndTime = new TimeOnly(12, 0, 0),
                            PatientId = 5,
                            StartTime = new TimeOnly(8, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            ApplicationUserId = 3,
                            Date = new DateOnly(2024, 6, 3),
                            EndTime = new TimeOnly(15, 0, 0),
                            PatientId = 6,
                            StartTime = new TimeOnly(13, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            ApplicationUserId = 3,
                            Date = new DateOnly(2024, 6, 4),
                            EndTime = new TimeOnly(14, 0, 0),
                            PatientId = 7,
                            StartTime = new TimeOnly(12, 0, 0)
                        },
                        new
                        {
                            Id = 8,
                            ApplicationUserId = 3,
                            Date = new DateOnly(2024, 6, 4),
                            EndTime = new TimeOnly(16, 0, 0),
                            PatientId = 8,
                            StartTime = new TimeOnly(15, 0, 0)
                        },
                        new
                        {
                            Id = 9,
                            ApplicationUserId = 2,
                            Date = new DateOnly(2024, 6, 5),
                            EndTime = new TimeOnly(9, 0, 0),
                            PatientId = 1,
                            StartTime = new TimeOnly(8, 0, 0)
                        },
                        new
                        {
                            Id = 10,
                            ApplicationUserId = 3,
                            Date = new DateOnly(2024, 6, 5),
                            EndTime = new TimeOnly(10, 0, 0),
                            PatientId = 5,
                            StartTime = new TimeOnly(9, 0, 0)
                        });
                });

            modelBuilder.Entity("MobileCare.Models.BookingActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActivityId")
                        .HasColumnType("int");

                    b.Property<string>("ActivityNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<string>("BookingNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Hours")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BookingActivities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActivityId = 1,
                            ActivityNote = "Patient needed slight adjustment to usual positioning of shower chair",
                            BookingId = 1,
                            BookingNote = "Ensure shower chair is readily available",
                            Hours = 1
                        },
                        new
                        {
                            Id = 2,
                            ActivityId = 2,
                            ActivityNote = "Due to warm weather, patient was dressed in shorts and short sleeved shirt as requested",
                            BookingId = 1,
                            BookingNote = "Prefer wearing comfortable clothing according to weather",
                            Hours = 1
                        },
                        new
                        {
                            Id = 3,
                            ActivityId = 3,
                            ActivityNote = "Aseptic cleaning and wound dressing changes were done. No abnormalities found.",
                            BookingId = 1,
                            BookingNote = "I have 1 surgical wound. Wound dressing changes to be done twice daily. Had kneee replacement done.",
                            Hours = 1
                        },
                        new
                        {
                            Id = 4,
                            ActivityId = 5,
                            BookingId = 2,
                            BookingNote = "Require assistance to and from doctor visits",
                            Hours = 2
                        },
                        new
                        {
                            Id = 5,
                            ActivityId = 2,
                            BookingId = 3,
                            BookingNote = "Require assistance with dressing",
                            Hours = 1
                        },
                        new
                        {
                            Id = 6,
                            ActivityId = 3,
                            BookingId = 4,
                            BookingNote = "Require post-oparative care after skin surgery",
                            Hours = 2
                        },
                        new
                        {
                            Id = 7,
                            ActivityId = 4,
                            ActivityNote = "Bathing of patient went well. Skin seems a bit irritated by particular brand of soap used. Patient should consider trying different soap brand.",
                            BookingId = 5,
                            BookingNote = "Prefer being bathed with music in the background",
                            Hours = 1
                        },
                        new
                        {
                            Id = 8,
                            ActivityId = 5,
                            ActivityNote = "Accomodated patient during the visitation",
                            BookingId = 5,
                            BookingNote = "Visiting my grandchildren and require assistance",
                            Hours = 3
                        },
                        new
                        {
                            Id = 9,
                            ActivityId = 3,
                            BookingId = 6,
                            BookingNote = "Had hip surgery. Required post-operative care assistance",
                            Hours = 2
                        },
                        new
                        {
                            Id = 10,
                            ActivityId = 1,
                            BookingId = 7,
                            Hours = 1
                        },
                        new
                        {
                            Id = 11,
                            ActivityId = 2,
                            BookingId = 7,
                            Hours = 1
                        },
                        new
                        {
                            Id = 12,
                            ActivityId = 2,
                            ActivityNote = "Assisted patient as requested",
                            BookingId = 8,
                            BookingNote = "Require dressing assistance as I can't move my body much due to injury",
                            Hours = 1
                        },
                        new
                        {
                            Id = 13,
                            ActivityId = 1,
                            BookingId = 9,
                            Hours = 1
                        },
                        new
                        {
                            Id = 14,
                            ActivityId = 3,
                            BookingId = 10,
                            Hours = 1
                        });
                });

            modelBuilder.Entity("MobileCare.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            ApplicationUserId = 4
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            ApplicationUserId = 5
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 3,
                            ApplicationUserId = 6
                        },
                        new
                        {
                            Id = 4,
                            AddressId = 4,
                            ApplicationUserId = 7
                        },
                        new
                        {
                            Id = 5,
                            AddressId = 5,
                            ApplicationUserId = 8
                        },
                        new
                        {
                            Id = 6,
                            AddressId = 6,
                            ApplicationUserId = 9
                        },
                        new
                        {
                            Id = 7,
                            AddressId = 7,
                            ApplicationUserId = 10
                        },
                        new
                        {
                            Id = 8,
                            AddressId = 8,
                            ApplicationUserId = 11
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("MobileCare.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("MobileCare.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MobileCare.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("MobileCare.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
